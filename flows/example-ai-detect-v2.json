[{"id":"118f9b2fefef307a","type":"subflow","name":"[AI] Detect-v2","info":"Make prediction on image with Tensorflow.js model trained with tequ-tf1-ca-training-pipeline.\n\nInput image must be image buffer in **'msg.payload'**.\n\nModel is loaded from configured folder.\n\nInference image and add result to output message. \n\nCalculates approximation of length in centimeters of detected object(s) based on given **image_width_cm**. \n\nParameter **image_width_cm** can be set in 'settings.js'-file separately for each msg.topic (datasource id).\n\nFor example:\n\n`process.env.image_width_cm = JSON.stringify({\"10\":130,\"11\":130,\"20\":130,\"21\":130});`\n\n`{\n    { msg.topic:image width [cm] },\n    { msg.topic:image width [cm] }\n}`\n\n\nBasic image info and exif is added to output message, if available.\n\nTo train a model, please look:\n\nhttps://github.com/juhaautioniemi/tequ-tf1-ca-training-pipeline\n\n\n\n\n\n\n","category":"Tequ-API Client","in":[{"x":60,"y":80,"wires":[{"id":"a6780e6ae7c67a93"}]}],"out":[{"x":1000,"y":360,"wires":[{"id":"6f79d6a589d648f8","port":0}]}],"env":[{"name":"threshold","type":"num","value":"0.5","ui":{"type":"input","opts":{"types":["num","env"]}}},{"name":"image_width_cm","type":"json","value":"{\"10\":130}","ui":{"type":"input","opts":{"types":["json","env"]}}},{"name":"model_folder","type":"str","value":"C:\\\\Users\\\\juha.autioniemi\\\\.node-red\\\\config\\\\model","ui":{"type":"input","opts":{"types":["str"]}}}],"meta":{"module":"node-red-contrib-tequ-ai-detect-v2","version":"0.0.1","author":"juha.autioniemi@lapinamk.fi","desc":"Detect objects from image using Cloud Annotations JavaScript SDK.","license":"MIT"},"color":"#FFCC66","icon":"node-red/status.svg","status":{"x":1000,"y":420,"wires":[{"id":"367f9f3de6e7b672","port":0}]}},{"id":"1556db751a958148","type":"function","z":"118f9b2fefef307a","name":"model.detect","func":"var imageBuffer = msg.payload;\nvar results = [];\nvar labels = context.get(\"labels\");\nvar threshold = msg.threshold;\nvar image_width = msg.width;\nvar image_height = msg.height;\n\n//Make prediction on input image\nmodel = context.get(\"model\")\nresults = await model.detect(imageBuffer)   \nnode.warn(results)\n//Calculate object width if image_width_cm is given input message\nif(\"image_width_cm\" in msg){\n    var image_width_cm = msg.image_width_cm;\n\n    for(var j=0;j<results.length;j++){\n        px_in_cm = image_width_cm / msg.width\n        object_size_cm = px_in_cm * results[j].bbox[2]\n        results[j].length_cm = Math.round(object_size_cm)\n    }\n}\n\n// Create output message\nresult_message = {\n    \"start\":msg.start,\n    \"labels\":context.get(\"labels\"),\n    \"thresholdType\":msg.thresholdType,\n    \"threshold\": msg.threshold,\n    \"image_width_cm\":msg.image_width_cm,\n    \"image_width_cm_type\":msg.image_width_cm_type,\n    \"topic\":msg.topic,\n    \"payload\":{\n        \"inference\":{\n            \"metadata\":{\n                \"format\":context.get(\"model_file\")[\"format\"],\n                \"generatedBy\":context.get(\"model_file\")[\"generatedBy\"],\n                \"convertedBy\":context.get(\"model_file\")[\"convertedBy\"],\n            },\n            \"time_ms\":0,\n            \"result\":results,\n            \"model\":env.get(\"inference_model_id\"),\n            \"type\":\"object detection\"\n        },\n        \"image\":{\n            \"buffer\":imageBuffer,\n            \"width\": msg.width,\n            \"height\": msg.height,\n            \"type\": msg.type,\n            \"size\": (imageBuffer).length,\n            \"exif\":{}\n        }\n    }\n}\n\n// Add exif information\nif(msg.exif){\n     result_message.payload.image.exif = msg.exif\n}\n\nreturn result_message;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\nplatform = os.platform()\nmodel_folder = env.get(\"model_folder\")\n\nif(platform == \"win32\"){\n    model_file = model_folder+\"\\\\\"+\"model.json\"\n    labels_file = model_folder+\"\\\\\"+\"labels.json\"    \n}\nelse{\n    model_file = model_folder+\"/\"+\"model.json\"\n    labels_file = model_folder+\"/\"+\"labels.json\"        \n}\n\n\n\n\n\ntry {\n        if(fs.existsSync(model_folder)){\n            if(fs.existsSync(model_file)){\n                if(fs.existsSync(labels_file)){\n                    context.set(\"model_file\",JSON.parse(fs.readFileSync(model_file, 'utf8')))\n                    context.set(\"labels\",JSON.parse(fs.readFileSync(labels_file, 'utf8')))\n                    const model = await models.load(model_folder)\n                    context.set(\"model\",model)\n                    node.status({fill:\"green\",shape:\"dot\",text:\"Model ready\"})\n                }\n                else{\n                    node.status({fill:\"red\",shape:\"dot\",text:\"labels.json not found\"})        \n                }\n            }\n            else{\n                node.status({fill:\"red\",shape:\"dot\",text:\"models.json not found\"})    \n            }\n        }\n        else{\n            node.status({fill:\"red\",shape:\"dot\",text:\"Model folder not found\"})\n        }\n}\ncatch (err) {\n        node.status({fill:\"red\",shape:\"dot\",text:\"Error loading model\"})\n        node.error(err,msg)\n}","finalize":"","libs":[{"var":"models","module":"@cloud-annotations/models-node-gpu"},{"var":"fs","module":"fs"},{"var":"os","module":"os"}],"x":530,"y":360,"wires":[["a635567c4613328a"]]},{"id":"625bb41e8b68ee34","type":"change","z":"118f9b2fefef307a","name":"timer","rules":[{"t":"set","p":"start","pt":"msg","to":"","tot":"date"}],"action":"","property":"","from":"","to":"","reg":false,"x":170,"y":160,"wires":[["0733b75c79be4452"]]},{"id":"0733b75c79be4452","type":"image-info","z":"118f9b2fefef307a","name":"","x":190,"y":220,"wires":[["6a02acaed2d97ceb"]]},{"id":"6a02acaed2d97ceb","type":"exif","z":"118f9b2fefef307a","name":"","mode":"normal","property":"payload","x":170,"y":300,"wires":[["24b022bea4a2b9ad"]]},{"id":"24b022bea4a2b9ad","type":"function","z":"118f9b2fefef307a","name":"Set threshold & image_width_cm","func":"//Define threshold\nvar threshold = 0;\n\nglobal_settings = global.get(\"settings\") || undefined\nvar thresholdType = \"\"\n\nif(global_settings !== undefined){\n    if(\"threshold\" in global_settings){\n        threshold = global_settings[\"threshold\"]\n        thresholdType = \"global\";\n    }\n}\n\nelse if(\"threshold\" in msg){\n    threshold = msg.threshold;\n    thresholdType = \"msg\";\n    if(threshold < 0){\n        threshold = 0\n    }\n    else if(threshold > 1){\n        threshold = 1\n    }\n}\n\nelse{\n    try{\n        threshold = env.get(\"threshold\");\n        thresholdType = \"env\";\n    }\n    catch(err){\n        threshold = 0.5\n        thresholdType = \"default\";\n    }\n    \n    \n   \n}\n\n\ntry{\n    image_width_cm_type = \"env\";\n    image_width_cm = JSON.parse(env.get(\"image_width_cm\"))[msg.topic];\n        \n}\ncatch(err){\n    image_width_cm = 130\n    image_width_cm_type = \"default\";\n}\n\n\nif(threshold == undefined){\n    threshold = 0\n}\n\nmsg.thresholdType = thresholdType;\nmsg.threshold = threshold;\nmsg.image_width_cm = image_width_cm;\nmsg.image_width_cm_type = image_width_cm_type;\n//node.status({fill:\"green\",shape:\"dot\",text:\"threshold: \"+threshold+\" | Image width: \"+image_width_cm});\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":260,"y":360,"wires":[["1556db751a958148"]]},{"id":"a6780e6ae7c67a93","type":"function","z":"118f9b2fefef307a","name":"isBuffer?","func":"timestamp = new Date().toISOString();\nvar image = msg.payload;\n\nif(Buffer.isBuffer(image)){\n    node.status({fill:\"green\",shape:\"dot\",text:timestamp + \" OK\"});  \n    return msg;\n}\nelse{\n    node.error(\"msg.payload is not an image buffer\",msg)\n    node.status({fill:\"red\",shape:\"dot\",text:timestamp + \" msg.payload is not an image buffer\"});  \n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":180,"y":80,"wires":[["625bb41e8b68ee34"]]},{"id":"a635567c4613328a","type":"change","z":"118f9b2fefef307a","name":"end timer","rules":[{"t":"set","p":"payload.inference.time_ms","pt":"msg","to":"$millis() - msg.start","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":700,"y":360,"wires":[["6f79d6a589d648f8"]]},{"id":"6f79d6a589d648f8","type":"function","z":"118f9b2fefef307a","name":"","func":"node.status({fill:\"blue\",shape:\"dot\",text:msg.payload.inference.time_ms+\" ms\"});  \nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":860,"y":360,"wires":[[]]},{"id":"367f9f3de6e7b672","type":"status","z":"118f9b2fefef307a","name":"","scope":null,"x":860,"y":420,"wires":[[]]},{"id":"83a7a965.1808a8","type":"subflow","name":"[IMG] Annotate","info":"","category":"Tequ-API Client","in":[{"x":120,"y":140,"wires":[{"id":"d05bfd8e.a02e"}]}],"out":[{"x":1080,"y":140,"wires":[{"id":"4e5f5c6c.bcf214","port":0}]}],"env":[{"name":"box_colors","type":"json","value":"{\"fish\":\"#FFFFFF\",\"pike\":\"#006400\",\"perch\":\"#008000\",\"smolt\":\"#ADD8E6\",\"salmon\":\"#0000FF\",\"trout\":\"#0000FF\",\"cyprinidae\":\"#808080\",\"zander\":\"#009000\",\"bream\":\"#008800\"}","ui":{"type":"input","opts":{"types":["json"]}}},{"name":"image_settings","type":"json","value":"{\"quality\":0.8}","ui":{"type":"input","opts":{"types":["json"]}}},{"name":"image_type","type":"str","value":"image/jpeg","ui":{"type":"select","opts":{"opts":[{"l":{"en-US":"JPG"},"v":"image/jpeg"},{"l":{"en-US":"PNG"},"v":"image/png"}]}}},{"name":"bbox_lineWidth","type":"num","value":"5","ui":{"type":"spinner","opts":{"min":0,"max":10}}},{"name":"bbox_text_color","type":"str","value":"white","ui":{"type":"select","opts":{"opts":[{"l":{"en-US":"white"},"v":"white"},{"l":{"en-US":"black"},"v":"black"},{"l":{"en-US":"blue"},"v":"blue"},{"l":{"en-US":"green"},"v":"green"},{"l":{"en-US":"yellow"},"v":"yellow"},{"l":{"en-US":"red"},"v":"red"},{"l":{"en-US":"orange"},"v":"orange"}]}}},{"name":"bbox_font","type":"str","value":"30px Arial","ui":{"type":"select","opts":{"opts":[{"l":{"en-US":"5px Arial"},"v":"5 px Arial"},{"l":{"en-US":"10px Arial"},"v":"10px Arial"},{"l":{"en-US":"15px Arial"},"v":"15px Arial"},{"l":{"en-US":"20px Arial"},"v":"20px Arial"},{"l":{"en-US":"25px Arial"},"v":"25px Arial"},{"l":{"en-US":"30px Arial"},"v":"30px Arial"},{"l":{"en-US":"35px Arial"},"v":"35px Arial"},{"l":{"en-US":"40px Arial"},"v":"40px Arial"},{"l":{"en-US":"45px Arial"},"v":"45px Arial"},{"l":{"en-US":"50px Arial"},"v":"50px Arial"}]}}},{"name":"label_offset_x","type":"num","value":"0","ui":{"type":"input","opts":{"types":["num"]}}},{"name":"label_offset_y","type":"num","value":"30","ui":{"type":"input","opts":{"types":["num"]}}},{"name":"threshold","type":"num","value":"0.75","ui":{"type":"spinner","opts":{"min":0,"max":1}}},{"name":"labels","type":"json","value":"[\"fish\",\"perch\", \"pike\", \"rainbow trout\", \"salmon\", \"trout\", \"cyprinidae\", \"zander\", \"smolt\"]","ui":{"type":"input","opts":{"types":["json"]}}}],"meta":{"module":"[IMG] Annotate","version":"0.0.1","author":"juha.autioniemi@lapinamk.fi","desc":"Annotates prediction results from [AI] Detect subflows.","license":"MIT"},"color":"#87A980","icon":"font-awesome/fa-pencil-square-o","status":{"x":1080,"y":280,"wires":[{"id":"7fd4f6bf24348b12","port":0}]}},{"id":"c19ac6bd.2a9d08","type":"function","z":"83a7a965.1808a8","name":"Annotate with  canvas","func":"var img = msg.payload.image.buffer;\nvar image_type = env.get(\"image_type\");\nvar image_settings = env.get(\"image_settings\");\nvar bbox_lineWidth = env.get(\"bbox_lineWidth\");\nvar bbox_text_color = env.get(\"bbox_text_color\");\nvar label_offset_x = env.get(\"label_offset_x\");\nvar label_offset_y = env.get(\"label_offset_y\");\nvar bbox_font = env.get(\"bbox_font\");\nvar COLORS = env.get(\"box_colors\");\nvar objects = msg.payload.inference.result\nvar labels = env.get(\"labels\")\n\n//Define threshold\nvar threshold = 0;\n\nglobal_settings = global.get(\"settings\") || undefined\nvar thresholdType = \"\"\n\nif(global_settings !== undefined){\n    if(\"threshold\" in global_settings){\n        threshold = global_settings[\"threshold\"]\n        thresholdType = \"global\";\n    }\n}\n\nelse if(\"threshold\" in msg){\n    threshold = msg.threshold;\n    thresholdType = \"msg\";\n    if(threshold < 0){\n        threshold = 0\n    }\n    else if(threshold > 1){\n        threshold = 1\n    }\n}\n\nelse{\n    threshold = env.get(\"threshold\");\n    thresholdType = \"env\";\n}\n\nmsg.thresholdUsed = threshold;\nmsg.thresholdTypeUsed = thresholdType;\n\nasync function annotateImage(image) {\n  const localImage = await canvas.loadImage(image);  \n  const cvs = canvas.createCanvas(localImage.width, localImage.height);\n  const ctx = cvs.getContext('2d');  \n  ctx.drawImage(localImage, 0, 0); \n  \n  objects.forEach((obj) => {\n        if(labels.includes(obj.class) && obj.score >= threshold){\n            let [x, y, w, h] = obj.bbox;\n            ctx.lineWidth = bbox_lineWidth;\n            ctx.strokeStyle = COLORS[obj.class];\n            ctx.strokeRect(x, y, w, h);\n            ctx.fillStyle = bbox_text_color;\n            ctx.font = bbox_font;\n            ctx.fillText(obj.class+\" \"+Math.round(obj.score*100)+\" %\",x+label_offset_x,y+label_offset_y);\n        }\n      });\n  \n  return cvs.toBuffer(image_type, image_settings);\n}\n\nif(objects.length > 0){\n    msg.annotated_image = await annotateImage(img)\n    //node.done()\n    msg.objects_found = true\n}\nelse{\n    msg.objects_found = false\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"canvas","module":"canvas"}],"x":440,"y":140,"wires":[["a801355d.9f7ac8"]]},{"id":"d05bfd8e.a02e","type":"change","z":"83a7a965.1808a8","name":"timer","rules":[{"t":"set","p":"start","pt":"msg","to":"","tot":"date"}],"action":"","property":"","from":"","to":"","reg":false,"x":230,"y":140,"wires":[["c19ac6bd.2a9d08"]]},{"id":"a801355d.9f7ac8","type":"change","z":"83a7a965.1808a8","name":"end timer","rules":[{"t":"set","p":"payload.annotation.time_ms","pt":"msg","to":"$millis() - msg.start","tot":"jsonata"},{"t":"set","p":"payload.annotation.buffer","pt":"msg","to":"annotated_image","tot":"msg"},{"t":"set","p":"payload.annotation.objects_found","pt":"msg","to":"objects_found","tot":"msg"},{"t":"delete","p":"annotated_image","pt":"msg"},{"t":"delete","p":"start","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":640,"y":140,"wires":[["4e5f5c6c.bcf214","c20a6448.e6f218"]]},{"id":"4e5f5c6c.bcf214","type":"change","z":"83a7a965.1808a8","name":"delete useless","rules":[{"t":"delete","p":"annotated_image","pt":"msg"},{"t":"delete","p":"start","pt":"msg"},{"t":"delete","p":"objects_found","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":140,"wires":[[]]},{"id":"c20a6448.e6f218","type":"switch","z":"83a7a965.1808a8","name":"objects found?","property":"objects_found","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","repair":false,"outputs":2,"x":660,"y":200,"wires":[["a9379cd1321a02da"],["0ec56ca8f000a540"]]},{"id":"a9379cd1321a02da","type":"function","z":"83a7a965.1808a8","name":"","func":"node.status({fill:\"green\",shape:\"dot\",text:msg.thresholdTypeUsed+\" \"+msg.thresholdUsed+\" in \"+msg.payload.annotation.time_ms+\" ms\"})","outputs":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":860,"y":180,"wires":[]},{"id":"0ec56ca8f000a540","type":"function","z":"83a7a965.1808a8","name":"","func":"node.status({fill:\"green\",shape:\"dot\",text:msg.thresholdTypeUsed+\" \"+msg.thresholdUsed+\" No objects to annotate\"})","outputs":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":860,"y":220,"wires":[]},{"id":"7fd4f6bf24348b12","type":"status","z":"83a7a965.1808a8","name":"","scope":null,"x":860,"y":280,"wires":[[]]},{"id":"53976475e95e5b99","type":"catch","z":"a9c0e43fece362c2","name":"","scope":null,"uncaught":false,"x":200,"y":320,"wires":[["bb1d4ac476fd0eb3"]]},{"id":"bb1d4ac476fd0eb3","type":"debug","z":"a9c0e43fece362c2","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":370,"y":320,"wires":[]},{"id":"1415d954bbdc4252","type":"fileinject","z":"a9c0e43fece362c2","name":"","x":160,"y":120,"wires":[["8b2d16c84c9d329d"]]},{"id":"d27864d670dab590","type":"subflow:83a7a965.1808a8","z":"a9c0e43fece362c2","name":"","env":[{"name":"box_colors","value":"{\"fish\":\"#FFFFFF\",\"pike\":\"#006400\",\"perch\":\"#008000\",\"smolt\":\"#ADD8E6\",\"salmon\":\"#0000FF\",\"rainbow trout\":\"#800080\",\"trout\":\"#0000FF\",\"cyprinidae\":\"#808080\",\"zander\":\"#000000\"}","type":"json"},{"name":"image_settings","value":"{\"quality\":0.95}","type":"json"},{"name":"bbox_lineWidth","value":"4","type":"num"},{"name":"threshold","value":"0.65","type":"num"},{"name":"labels","value":"[\"fish\",\"perch\", \"pike\", \"rainbow trout\", \"salmon\", \"trout\", \"salmon\",\"trout\",\"cyprinidae\", \"zander\", \"bream\", \"smolt\"]","type":"json"},{"name":"output_image_settings","value":"{ \"quality\": 0.8 }","type":"json"},{"name":"bbox_text_offset_x","value":"0","type":"str"}],"x":400,"y":240,"wires":[["b76d985ecb88e247"]]},{"id":"b76d985ecb88e247","type":"image","z":"a9c0e43fece362c2","name":"","width":"480","data":"payload.annotation.buffer","dataType":"msg","thumbnail":false,"active":true,"pass":false,"outputs":0,"x":600,"y":240,"wires":[]},{"id":"8b2d16c84c9d329d","type":"subflow:118f9b2fefef307a","z":"a9c0e43fece362c2","name":"","env":[{"name":"model_folder","value":"","type":"str"}],"x":180,"y":240,"wires":[["d27864d670dab590"]]}]
