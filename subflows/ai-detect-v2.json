[{"id":"118f9b2fefef307a","type":"subflow","name":"[AI] Detect ","info":"","category":"Tequ-API Client","in":[{"x":60,"y":80,"wires":[{"id":"a6780e6ae7c67a93"}]}],"out":[{"x":1000,"y":360,"wires":[{"id":"6f79d6a589d648f8","port":0}]}],"env":[{"name":"threshold","type":"num","value":"0.5","ui":{"type":"input","opts":{"types":["num","env"]}}},{"name":"image_width_cm","type":"json","value":"{\"10\":130}","ui":{"type":"input","opts":{"types":["json","env"]}}},{"name":"model_folder","type":"str","value":"C:\\\\Users\\\\juha.autioniemi\\\\.node-red\\\\config\\\\model","ui":{"type":"input","opts":{"types":["str"]}}}],"meta":{"module":"[AI] Detect","version":"0.0.1","author":"juha.autioniemi@lapinamk.fi","desc":"Detect objects from image using Cloud Annotations JavaScript SDK.","license":"MIT"},"color":"#FFCC66","icon":"node-red/status.svg","status":{"x":1000,"y":420,"wires":[{"id":"367f9f3de6e7b672","port":0}]}},{"id":"1556db751a958148","type":"function","z":"118f9b2fefef307a","name":"model.detect","func":"var imageBuffer = msg.payload;\nvar results = [];\nvar labels = context.get(\"labels\");\nvar threshold = msg.threshold;\nvar image_width = msg.width;\nvar image_height = msg.height;\n\n//Make prediction on input image\nmodel = context.get(\"model\")\nresults = await model.detect(imageBuffer)   \nnode.warn(results)\n//Calculate object width if image_width_cm is given input message\nif(\"image_width_cm\" in msg){\n    var image_width_cm = msg.image_width_cm;\n\n    for(var j=0;j<results.length;j++){\n        px_in_cm = image_width_cm / msg.width\n        object_size_cm = px_in_cm * results[j].bbox[2]\n        results[j].length_cm = Math.round(object_size_cm)\n    }\n}\n\n// Create output message\nresult_message = {\n    \"start\":msg.start,\n    \"labels\":context.get(\"labels\"),\n    \"thresholdType\":msg.thresholdType,\n    \"threshold\": msg.threshold,\n    \"image_width_cm\":msg.image_width_cm,\n    \"image_width_cm_type\":msg.image_width_cm_type,\n    \"topic\":msg.topic,\n    \"payload\":{\n        \"inference\":{\n            \"metadata\":{\n                \"format\":context.get(\"model_file\")[\"format\"],\n                \"generatedBy\":context.get(\"model_file\")[\"generatedBy\"],\n                \"convertedBy\":context.get(\"model_file\")[\"convertedBy\"],\n            },\n            \"time_ms\":0,\n            \"result\":results,\n            \"model\":env.get(\"inference_model_id\"),\n            \"type\":\"object detection\"\n        },\n        \"image\":{\n            \"buffer\":imageBuffer,\n            \"width\": msg.width,\n            \"height\": msg.height,\n            \"type\": msg.type,\n            \"size\": (imageBuffer).length,\n            \"exif\":{}\n        }\n    }\n}\n\n// Add exif information\nif(msg.exif){\n     result_message.payload.image.exif = msg.exif\n}\n\nreturn result_message;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\nmodel_folder = env.get(\"model_folder\")\nmodel_file = model_folder+\"\\\\model.json\"\nlabels_file = model_folder+\"\\\\labels.json\"\n\ntry {\n        if(fs.existsSync(model_folder)){\n            if(fs.existsSync(model_file)){\n                if(fs.existsSync(labels_file)){\n                    context.set(\"model_file\",JSON.parse(fs.readFileSync(model_file, 'utf8')))\n                    context.set(\"labels\",JSON.parse(fs.readFileSync(labels_file, 'utf8')))\n                    const model = await models.load(model_folder)\n                    context.set(\"model\",model)\n                    node.status({fill:\"green\",shape:\"dot\",text:\"Model ready\"})\n                }\n                else{\n                    node.status({fill:\"red\",shape:\"dot\",text:\"labels.json not found\"})        \n                }\n            }\n            else{\n                node.status({fill:\"red\",shape:\"dot\",text:\"models.json not found\"})    \n            }\n        }\n        else{\n            node.status({fill:\"red\",shape:\"dot\",text:\"Model folder not found\"})\n        }\n}\ncatch (err) {\n        node.status({fill:\"red\",shape:\"dot\",text:\"Error loading model\"})\n        node.error(err,msg)\n}","finalize":"","libs":[{"var":"models","module":"@cloud-annotations/models-node-gpu"},{"var":"fs","module":"fs"}],"x":530,"y":360,"wires":[["a635567c4613328a"]]},{"id":"625bb41e8b68ee34","type":"change","z":"118f9b2fefef307a","name":"timer","rules":[{"t":"set","p":"start","pt":"msg","to":"","tot":"date"}],"action":"","property":"","from":"","to":"","reg":false,"x":170,"y":160,"wires":[["0733b75c79be4452"]]},{"id":"0733b75c79be4452","type":"image-info","z":"118f9b2fefef307a","name":"","x":190,"y":220,"wires":[["6a02acaed2d97ceb"]]},{"id":"6a02acaed2d97ceb","type":"exif","z":"118f9b2fefef307a","name":"","mode":"normal","property":"payload","x":170,"y":300,"wires":[["24b022bea4a2b9ad"]]},{"id":"24b022bea4a2b9ad","type":"function","z":"118f9b2fefef307a","name":"Set threshold & image_width_cm","func":"//Define threshold\nvar threshold = 0;\n\nglobal_settings = global.get(\"settings\") || undefined\nvar thresholdType = \"\"\n\nif(global_settings !== undefined){\n    if(\"threshold\" in global_settings){\n        threshold = global_settings[\"threshold\"]\n        thresholdType = \"global\";\n    }\n}\n\nelse if(\"threshold\" in msg){\n    threshold = msg.threshold;\n    thresholdType = \"msg\";\n    if(threshold < 0){\n        threshold = 0\n    }\n    else if(threshold > 1){\n        threshold = 1\n    }\n}\n\nelse{\n    threshold = env.get(\"threshold\");\n    thresholdType = \"env\";\n}\n\n\nif(global_settings !== undefined){\n    if(\"image_width_cm\" in global_settings){\n        image_width_cm = (global_settings[\"image_width_cm\"])[msg.topic]\n        image_width_cm_type = \"global\";\n    }\n}\n\nelse if(\"image_width_cm\" in msg){\n    image_width_cm = (msg.image_width_cm)[msg.topic];\n    \n    \n    image_width_cm_type = \"msg\";\n    if(image_width_cm < 0){\n        image_width_cm = 0\n    }\n}\nelse{\n    image_width_cm = JSON.parse(env.get(\"image_width_cm\"))[msg.topic];\n    image_width_cm_type = \"env\";\n}\n\n\nmsg.thresholdType = thresholdType;\nmsg.threshold = threshold;\nmsg.image_width_cm = image_width_cm;\nmsg.image_width_cm_type = image_width_cm_type;\nnode.status({fill:\"green\",shape:\"dot\",text:\"threshold: \"+threshold+\" | Image width: \"+image_width_cm});\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":260,"y":360,"wires":[["1556db751a958148"]]},{"id":"a6780e6ae7c67a93","type":"function","z":"118f9b2fefef307a","name":"isBuffer?","func":"timestamp = new Date().toISOString();\nvar image = msg.payload;\n\nif(Buffer.isBuffer(image)){\n    node.status({fill:\"green\",shape:\"dot\",text:timestamp + \" OK\"});  \n    return msg;\n}\nelse{\n    node.error(\"msg.payload is not an image buffer\",msg)\n    node.status({fill:\"red\",shape:\"dot\",text:timestamp + \" msg.payload is not an image buffer\"});  \n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":180,"y":80,"wires":[["625bb41e8b68ee34"]]},{"id":"a635567c4613328a","type":"change","z":"118f9b2fefef307a","name":"end timer","rules":[{"t":"set","p":"payload.inference.time_ms","pt":"msg","to":"$millis() - msg.start","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":700,"y":360,"wires":[["6f79d6a589d648f8"]]},{"id":"6f79d6a589d648f8","type":"function","z":"118f9b2fefef307a","name":"","func":"node.status({fill:\"blue\",shape:\"dot\",text:msg.payload.inference.time_ms+\" ms\"});  \nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":860,"y":360,"wires":[[]]},{"id":"367f9f3de6e7b672","type":"status","z":"118f9b2fefef307a","name":"","scope":null,"x":860,"y":420,"wires":[[]]},{"id":"7bf21a15eede56a3","type":"subflow:118f9b2fefef307a","z":"329180c.cb1438","name":"[AI] Detect ","env":[{"name":"image_width_cm","value":"image_width_cm","type":"env"}],"x":230,"y":540,"wires":[["7953d3c0cf824e31","fcdb654d.1d0de8"]]}]