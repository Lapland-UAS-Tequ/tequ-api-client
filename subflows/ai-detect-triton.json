[
    {
        "id": "5977f362e19ccc41",
        "type": "subflow",
        "name": "[AI] Detect - Triton",
        "info": "Send image to NVIDIA Triton Inference server using HTTP API.\n\nModel should be configured and loaded to server before using.\n\nThis node has been tested and developed with MobileNetV2 based object detection model.\n\nSupported Tequ-models:\n - tequ-fish-species-detection\n - ssd-example-model\n",
        "category": "Tequ-API Client",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "f5b87859a4522879"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 300,
                "wires": [
                    {
                        "id": "0795c1ab0eec563d",
                        "port": 1
                    },
                    {
                        "id": "4b8e37b718c4ca8c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1120,
                "y": 580,
                "wires": [
                    {
                        "id": "6d0778ab5e79f737",
                        "port": 0
                    }
                ]
            },
            {
                "x": 340,
                "y": 660,
                "wires": [
                    {
                        "id": "bd94d7605d47cc3f",
                        "port": 0
                    }
                ]
            },
            {
                "x": 560,
                "y": 340,
                "wires": [
                    {
                        "id": "50fd472c40180488",
                        "port": 0
                    }
                ]
            },
            {
                "x": 420,
                "y": 140,
                "wires": [
                    {
                        "id": "af6567cabf778615",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "threshold",
                "type": "num",
                "value": "0.75",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 1
                    }
                }
            },
            {
                "name": "model_name",
                "type": "str",
                "value": "ssd-example-model",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "triton_server_url",
                "type": "str",
                "value": "tequ-jetson-nx-1:8000",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "image_width_cm",
                "type": "env",
                "value": "image_width_cm",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "gzip_response",
                "type": "bool",
                "value": "false",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool"
                        ]
                    }
                }
            },
            {
                "name": "Workers",
                "type": "num",
                "value": "3",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 5
                    }
                }
            },
            {
                "name": "gzip_request",
                "type": "bool",
                "value": "false",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-tequ-ai-triton",
            "version": "0.0.1",
            "author": "juha.autioniemi@lapinamk.fi",
            "desc": "Inference image using NVIDIA Triton Inference server.",
            "license": "MIT"
        },
        "color": "#FFCC66",
        "inputLabels": [
            "Image buffer in"
        ],
        "outputLabels": [
            "Inference result",
            "Model configuration",
            "Is server ready?",
            "Preprocess output",
            "Discarded messages"
        ],
        "icon": "node-red/status.svg",
        "status": {
            "x": 1120,
            "y": 760,
            "wires": [
                {
                    "id": "868f81e0b92b1bd8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "056c21b301cf8d19",
        "type": "http request",
        "z": "5977f362e19ccc41",
        "name": "infer request",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 570,
        "y": 280,
        "wires": [
            [
                "0795c1ab0eec563d"
            ]
        ]
    },
    {
        "id": "76fa129b9a7ae1ce",
        "type": "function",
        "z": "5977f362e19ccc41",
        "name": "Set threshold & image_width_cm",
        "func": "//Define threshold\nlet threshold = 0;\nconst global_settings = global.get(\"settings\") || undefined\nlet thresholdType = \"\"\n\nif(global_settings !== undefined){\n    if(\"threshold\" in global_settings){\n        threshold = global_settings[\"threshold\"]\n        thresholdType = \"global\";\n    }\n}\n\nelse if(\"threshold\" in msg){\n    threshold = msg.threshold;\n    thresholdType = \"msg\";\n    if(threshold < 0){\n        threshold = 0\n    }\n    else if(threshold > 1){\n        threshold = 1\n    }\n}\n\nelse{\n    try{\n        threshold = env.get(\"threshold\");\n        thresholdType = \"env\";\n    }\n    catch(err){\n        threshold = 0.5\n        thresholdType = \"default\";\n    }\n}\n\n\ntry{\n    image_width_cm_type = \"env\";\n    image_width_cm = JSON.parse(env.get(\"image_width_cm\"))[msg.topic];\n        \n}\ncatch(err){\n    image_width_cm = 130\n    image_width_cm_type = \"default\";\n}\n\nif(image_width_cm == undefined){\n    image_width_cm = 130\n}\n\n\nif(threshold == undefined){\n    threshold = 0\n}\n\nmsg.thresholdType = thresholdType;\nmsg.threshold = threshold;\nmsg.image_width_cm = image_width_cm;\nmsg.image_width_cm_type = image_width_cm_type;\n//node.status({fill:\"green\",shape:\"dot\",text:\"threshold: \"+threshold+\" | Image width: \"+image_width_cm});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 200,
        "wires": [
            [
                "50fd472c40180488"
            ]
        ]
    },
    {
        "id": "e64a90d92eac1ac5",
        "type": "function",
        "z": "5977f362e19ccc41",
        "name": "isBuffer?",
        "func": "let timestamp = new Date().toISOString();\nmsg.start = Date.now()\n\nif(Buffer.isBuffer(msg.payload)){\n    \n    rate = flow.get(\"rate\") || 12000\n    \n    if(rate == 12000){\n        msg.rate = 12000\n    }\n    else if(rate > 2000){\n        msg.rate = 2000\n    }\n    else if(rate < 0){\n        msg.rate = rate    \n    }\n    else{\n        msg.rate = rate\n    }\n    \n    node.status({fill:\"green\",shape:\"dot\",text:\"Rate: \"+rate});  \n    \n    msg.image = msg.payload;\n    return msg;\n}\nelse{\n    node.error(\"msg.payload is not an image buffer\",msg)\n    node.status({fill:\"red\",shape:\"dot\",text:timestamp + \" payload is not a buffer\"});  \n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 60,
        "wires": [
            [
                "af6567cabf778615"
            ]
        ]
    },
    {
        "id": "6749cf1a7180a1f7",
        "type": "exif",
        "z": "5977f362e19ccc41",
        "name": "",
        "mode": "normal",
        "property": "payload",
        "x": 750,
        "y": 200,
        "wires": [
            [
                "76fa129b9a7ae1ce"
            ]
        ]
    },
    {
        "id": "d1607f726535c9ea",
        "type": "image-info",
        "z": "5977f362e19ccc41",
        "name": "",
        "x": 570,
        "y": 200,
        "wires": [
            [
                "6749cf1a7180a1f7"
            ]
        ]
    },
    {
        "id": "bdb2e3fd10af8410",
        "type": "moment",
        "z": "5977f362e19ccc41",
        "name": "ts",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Europe/Helsinki",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss.SSS",
        "locale": "fi-FI",
        "output": "ts",
        "outputType": "msg",
        "outTz": "Europe/Helsinki",
        "x": 390,
        "y": 200,
        "wires": [
            [
                "d1607f726535c9ea"
            ]
        ]
    },
    {
        "id": "87553a735772097f",
        "type": "http request",
        "z": "5977f362e19ccc41",
        "name": "status request",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 700,
        "y": 580,
        "wires": [
            [
                "6d0778ab5e79f737"
            ]
        ]
    },
    {
        "id": "6449e20489c9ea84",
        "type": "function",
        "z": "5977f362e19ccc41",
        "name": "request",
        "func": "let modelName = env.get(\"model_name\")\nlet server_url = env.get(\"triton_server_url\")\n\nmsg.requestTimeout = 1000;\nmsg.method = \"GET\";\nmsg.url = server_url+\"/v2/models/\"+modelName+\"/config\";\nnode.status({fill:\"yellow\",shape:\"dot\",text:\" Requesting...\"});   \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 580,
        "wires": [
            [
                "87553a735772097f"
            ]
        ]
    },
    {
        "id": "6d0778ab5e79f737",
        "type": "function",
        "z": "5977f362e19ccc41",
        "name": "status",
        "func": "let statusCode = msg.statusCode;\n\nif(statusCode == 200){\n    let model_data = msg.payload;\n    let modelName = env.get(\"model_name\")\n    parsed_value = JSON.parse(model_data.parameters.metadata.string_value)\n    model_data.parameters.labels = parsed_value.labels\n    model_data.parameters.metadata = parsed_value.metadata\n    flow.set(\"ready\",true)  \n    node.status({fill:\"green\",shape:\"dot\",text:\" Model configuration loaded.\"});   \n    flow.set(modelName,model_data)  \n    return msg;\n}\nelse{\n    flow.set(\"ready\",false)\n    node.status({fill:\"red\",shape:\"dot\",text:msg.statusCode+\": \"+\"Server is not ready or model not found.\"});   \n    //node.error(msg.statusCode,msg.payload)\n    return null\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "868f81e0b92b1bd8",
        "type": "status",
        "z": "5977f362e19ccc41",
        "name": "",
        "scope": [
            "6d0778ab5e79f737",
            "4b8e37b718c4ca8c",
            "0795c1ab0eec563d",
            "50fd472c40180488"
        ],
        "x": 840,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "bd94d7605d47cc3f",
        "type": "inject",
        "z": "5977f362e19ccc41",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "ready",
        "payloadType": "flow",
        "x": 210,
        "y": 580,
        "wires": [
            [
                "8a779968080835dc"
            ]
        ]
    },
    {
        "id": "8a779968080835dc",
        "type": "switch",
        "z": "5977f362e19ccc41",
        "name": "ready?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 580,
        "wires": [
            [
                "6449e20489c9ea84"
            ]
        ]
    },
    {
        "id": "d0e43f4619e7c9a3",
        "type": "catch",
        "z": "5977f362e19ccc41",
        "name": "",
        "scope": [
            "87553a735772097f"
        ],
        "uncaught": false,
        "x": 530,
        "y": 680,
        "wires": [
            [
                "8fe3194bb5f83425"
            ]
        ]
    },
    {
        "id": "8fe3194bb5f83425",
        "type": "function",
        "z": "5977f362e19ccc41",
        "name": "",
        "func": " node.status({fill:\"red\",shape:\"dot\",text:\"Server is not ready.\"});  \n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 680,
        "wires": []
    },
    {
        "id": "5c1401de6451b96f",
        "type": "inject",
        "z": "5977f362e19ccc41",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 520,
        "wires": [
            [
                "5d4d5da52ae63a37"
            ]
        ]
    },
    {
        "id": "5d4d5da52ae63a37",
        "type": "change",
        "z": "5977f362e19ccc41",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ready",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "4b8e37b718c4ca8c",
        "type": "function",
        "z": "5977f362e19ccc41",
        "name": "Post-process",
        "func": "let start_post_process = Date.now()\nlet inference_result = msg.payload;\nlet results = [];\nconst modelName = env.get(\"model_name\")\nconst model = flow.get(modelName);\nconst labels = model.parameters.labels;\nconst metadata = model.parameters.metadata;\nconst ts = msg.ts;\n\nconst threshold = msg.threshold;\nconst image_width = msg.width;\nconst image_height = msg.height;\nconst originalImage = msg.image;\nlet scores;\nlet boxes;\nlet names;\n\nfunction chunk(arr, chunkSize) {\n  if (chunkSize <= 0) throw \"Invalid chunk size\";\n  var R = [];\n  for (var i=0,len=arr.length; i<len; i+=chunkSize)\n    R.push(arr.slice(i,i+chunkSize));\n  return R;\n}\n\nfor(let i=0;i<(inference_result.outputs).length;i++){\n    //node.warn(inference_result.outputs[i])\n    \n    if(inference_result.outputs[i][\"name\"] == \"detection_scores\"){\n        scores = inference_result.outputs[i].data\n    }\n    else if(inference_result.outputs[i][\"name\"] == \"detection_boxes\"){\n        boxes = inference_result.outputs[i].data\n        boxes = chunk(boxes,4)\n        \n    }\n    else if(inference_result.outputs[i][\"name\"] == \"detection_classes\"){\n        names = inference_result.outputs[i].data \n    }\n} \n\nfor (let i = 0; i < scores.length; i++) {\n    if (scores[i] > threshold) {\n        newObject = {\n            \"bbox\":[\n                    boxes[i][1] * image_width,\n                    boxes[i][0] * image_height,\n                    (boxes[i][3] - boxes[i][1]) * image_width,\n                    (boxes[i][2] - boxes[i][0]) * image_height\n            ],\n            \"class\":labels[names[i]-1],\n            \"label\":labels[names[i]-1],\n            \"score\":scores[i],\n            \"length_cm\":NaN\n            }\n        results.push(newObject)\n    }\n}\n        \n//Calculate object width if image_width_cm is given input message\n if(\"image_width_cm\" in msg){\n    const image_width_cm = msg.image_width_cm;    \n    for(let j=0;j<results.length;j++){\n        px_in_cm = image_width_cm / msg.width\n        object_size_cm = px_in_cm * results[j].bbox[2]\n        results[j].length_cm = Math.round(object_size_cm)\n    }\n}\n        \n   \n        \n// Create output message\nlet result_message = {\n    \"labels\":labels,\n    \"thresholdType\":msg.thresholdType,\n    \"threshold\": msg.threshold,\n    \"image_width_cm\":msg.image_width_cm,\n    \"image_width_cm_type\":msg.image_width_cm_type,\n    \"topic\":msg.topic,\n    \"payload\":{\n        \"inference\":{\n            \"metadata\":metadata,\n            \"time_ms\": 0,\n            \"validated\":false,\n            \"result\":results,\n            \"type\":\"object detection\"\n        },\n        \"image\":{\n            \"buffer\":originalImage,\n            \"width\": msg.width,\n            \"height\": msg.height,\n            \"type\": msg.type,\n            \"size\": (originalImage).length,\n            \"exif\":{}\n            }\n    }\n}\n\n// Add exif information\nif(msg.exif){\n    result_message.payload.image.exif = msg.exif\n}\n\n//result_message.tf = msg.tf;\npost_process_time = Date.now()  - start_post_process;       \ntotal_ms =  Date.now()  - msg.start;   \n\nresult_message.payload.inference.time_ms = msg.request_time\n        \nnode.status({fill:\"blue\",shape:\"dot\",text:\"R:\"+msg.rate+\" | \"+msg.pre_process_time+\" ms | \" +msg.request_time+ \" ms | \"+total_ms+\" ms\"});           \n    \nreturn [result_message,{payload:msg.request_time}];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 260,
        "wires": [
            [],
            [
                "d099b789191fbd4d"
            ]
        ]
    },
    {
        "id": "0795c1ab0eec563d",
        "type": "function",
        "z": "5977f362e19ccc41",
        "name": "Status",
        "func": "let statusCode = msg.statusCode;\n\nif(statusCode == 200){\n    if(env.get(\"gzip_response\")){\n        msg.payload = JSON.parse(zlib.gunzipSync(msg.payload))\n    }   \n    else{\n        msg.payload = JSON.parse(msg.payload)  \n    }\n    \n    request_time =  (Date.now() - msg.start) - msg.pre_process_time;\n    msg.request_time = request_time\n    flow.set(\"ready\",true)\n    return [msg,null]\n}\nelse{\n    node.status({fill:\"yellow\",shape:\"dot\",text:\"Request failed... checking server...\"});  \n    flow.set(\"ready\",false)\n    return [null,msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "zlib",
                "module": "zlib"
            }
        ],
        "x": 750,
        "y": 280,
        "wires": [
            [
                "4b8e37b718c4ca8c"
            ],
            []
        ]
    },
    {
        "id": "f5b87859a4522879",
        "type": "switch",
        "z": "5977f362e19ccc41",
        "name": "ready?",
        "property": "ready",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 60,
        "wires": [
            [
                "e64a90d92eac1ac5"
            ]
        ]
    },
    {
        "id": "d099b789191fbd4d",
        "type": "smooth",
        "z": "5977f362e19ccc41",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "5",
        "round": "0",
        "mult": "single",
        "reduce": true,
        "x": 920,
        "y": 380,
        "wires": [
            [
                "c43af8c83f4c22bd"
            ]
        ]
    },
    {
        "id": "c43af8c83f4c22bd",
        "type": "change",
        "z": "5977f362e19ccc41",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "rate",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "af6567cabf778615",
        "type": "delay",
        "z": "5977f362e19ccc41",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 2,
        "x": 210,
        "y": 140,
        "wires": [
            [
                "bdb2e3fd10af8410"
            ],
            []
        ]
    },
    {
        "id": "50fd472c40180488",
        "type": "function",
        "z": "5977f362e19ccc41",
        "name": "Pre-process (numjs+piscina)",
        "func": "//Get a worker from the pool and execute the task\nconst start = Date.now();\nconst image = msg.payload;\nconst modelName = env.get(\"model_name\")\nconst server_url = env.get(\"triton_server_url\")\nlet piscina = context.get(\"piscina\")\n\n\ntry{\n    let result = await piscina.run({jpeg:image,gzip:env.get(\"gzip_request\")});\n    worker_time_ms =  Date.now() - start;\n    \n    //node.warn(worker_time_ms)\n    \n    const resultMsg = {\n        \"image\":image,\n        \"tensor\":Buffer.from(result.tensorBuffer),\n        \"tensor_shape\":result.tensorShape,\n        \"Content-Length\":result['Content-Length'],\n        \"inference_header_length\":result.inference_header_length,\n        \"image_tensor_buffer_length\":result.image_tensor_buffer_length,\n        \"processing_time\":worker_time_ms\n    }\n    \n    msg.method = \"POST\";\n    msg.url = server_url+\"/v2/models/\"+modelName+\"/infer\";\n    msg.headers = {\n        \"Content-Type\":\"application/octet-stream\",\n        \"Inference-Header-Content-Length\":resultMsg.inference_header_length,\n    };\n        \n    msg.payload = resultMsg.tensor\n    msg.triton_result = resultMsg\n    \n    if(env.get(\"gzip_response\")){\n        msg.headers[\"Accept-Encoding\"] = \"gzip\"\n    } \n    \n    if(env.get(\"gzip_request\")){\n        msg.headers[\"Content-Encoding\"] = \"gzip\"\n    } \n    \n     \n    pre_process_time =  Date.now() - start;\n    msg.pre_process_time = pre_process_time;\n    //node.status({fill:\"green\",shape:\"dot\",text:pre_process_time+\" ms\"});    \n    return msg;\n}\ncatch(e){\n    node.status({fill:\"red\",shape:\"dot\",text:\"Error running pre-processing...\"});    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let nr_folder;\nconst scriptName = 'numjs_piscina_worker.js';\nlet worker_path;\nconst platform = os.platform()\nlet worker_script;\n\nif(platform == \"win32\"){\n   sep = \"\\\\\"\n   nr_folder = path.resolve()\n   worker_path = path.resolve(scriptName)\n   worker_script = \"console.log(\\\"Worker starting...\\\");\\r\\nlet nj;\\r\\nlet zlib;\\r\\n\\r\\n\\r\\ntry{\\r\\n\\tnj = require(\\\"./node_modules\\//numjs\\\")\\r\\n}\\r\\ncatch(e){\\r\\n\\tconsole.log(\\\"Loading numjs failed\\\")\\r\\n\\tconsole.log(e)\\r\\n}\\r\\n\\r\\ntry{\\r\\n\\tzlib = require(\\'zlib\\');\\r\\n}\\r\\ncatch(e){\\r\\n\\tconsole.log(e)\\r\\n}\\r\\n\\r\\nmodule.exports = async ({jpeg,gzip}) => {\\r\\n\\ttry{\\r\\n\\t\\tconst start = Date.now();\\t\\r\\n\\t\\tconst img = nj.images.read(jpeg);\\r\\n\\t\\tconst dataBuffer = Buffer.from(img.selection.data);\\r\\n\\t\\tconst shape = [1].concat(img.shape);\\r\\n\\t\\tconst image_tensor_buffer_length = dataBuffer.length\\r\\n\\t\\t\\r\\n\\t\\t\\r\\n\\t\\tconst inference_header = {\\r\\n\\t\\t  \\\"model_name\\\" : \\\"test\\\",\\r\\n\\t\\t  \\\"inputs\\\" : [\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t  \\\"name\\\" : \\\"input_tensor\\\",\\r\\n\\t\\t\\t  \\\"shape\\\" : shape,\\r\\n\\t\\t\\t  \\\"datatype\\\" : \\\"UINT8\\\",\\r\\n\\t\\t\\t  \\\"parameters\\\" : {\\r\\n\\t\\t\\t\\t  \\\"binary_data_size\\\":image_tensor_buffer_length\\r\\n\\t\\t\\t  }\\r\\n\\t\\t\\t}\\r\\n\\t\\t  ],\\r\\n\\t\\t  \\\"outputs\\\" : [\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t  \\\"name\\\" : \\\"detection_scores\\\",\\r\\n\\t\\t\\t  \\\"parameters\\\" : {\\r\\n\\t\\t\\t\\t\\\"binary_data\\\" : false\\r\\n\\t\\t\\t  }\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t {\\r\\n\\t\\t\\t  \\\"name\\\" : \\\"detection_boxes\\\",\\r\\n\\t\\t\\t  \\\"parameters\\\" : {\\r\\n\\t\\t\\t\\t\\\"binary_data\\\" : false\\r\\n\\t\\t\\t  }\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t {\\r\\n\\t\\t\\t  \\\"name\\\" : \\\"detection_classes\\\",\\r\\n\\t\\t\\t  \\\"parameters\\\" : {\\r\\n\\t\\t\\t\\t\\\"binary_data\\\" : false\\r\\n\\t\\t\\t  }\\r\\n\\t\\t\\t}\\r\\n\\t\\t  ]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tconst inference_header_buffer = Buffer.from(JSON.stringify(inference_header))\\r\\n\\t\\tconst inference_header_length = inference_header_buffer.length\\r\\n\\t\\tlet payload = Buffer.concat([inference_header_buffer,dataBuffer])\\r\\n\\t\\ttime_ms =  Date.now() - start;\\r\\n\\t\\t\\r\\n\\t\\tif(gzip){\\r\\n\\t\\t\\tpayload = zlib.gzipSync(payload)\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tresult = {\\r\\n\\t\\t\\t\\\"tensorBuffer\\\" : payload,\\r\\n\\t\\t\\t\\\"Content-Type\\\" : \\\"application\\/octet-stream\\\",\\r\\n\\t\\t\\t\\\"inference_header_length\\\": inference_header_length,\\r\\n\\t\\t\\t\\\"image_tensor_buffer_length\\\":image_tensor_buffer_length,\\r\\n\\t\\t\\t\\\"tensorShape\\\":shape,\\r\\n\\t\\t\\t\\\"processing_time\\\":time_ms,\\r\\n\\t\\t\\t\\\"payload\\\":jpeg\\r\\n\\t\\t}\\t\\t\\r\\n\\t\\treturn result\\t\\t\\r\\n\\t}\\r\\n\\tcatch(e){\\r\\n\\t\\tconsole.log(e)\\r\\n\\t}\\r\\n\\t\\t\\r\\n}\"\n\n}\nelse{\n   nr_folder = path.resolve(\".node-red\")\n   let worker_path = path.resolve(\".node-red\",scriptName)\n   sep = \"/\" \n   worker_script = \"console.log(\\\"Worker starting...\\\");\\r\\nlet nj;\\r\\nlet zlib;\\r\\n\\r\\n\\r\\ntry{\\r\\n\\tnj = require(\\\"./node_modules\\//numjs\\\")\\r\\n}\\r\\ncatch(e){\\r\\n\\tconsole.log(\\\"Loading numjs failed\\\")\\r\\n\\tconsole.log(e)\\r\\n}\\r\\n\\r\\ntry{\\r\\n\\tzlib = require(\\'zlib\\');\\r\\n}\\r\\ncatch(e){\\r\\n\\tconsole.log(e)\\r\\n}\\r\\n\\r\\nmodule.exports = async ({jpeg,gzip}) => {\\r\\n\\ttry{\\r\\n\\t\\tconst start = Date.now();\\t\\r\\n\\t\\tconst img = nj.images.read(jpeg);\\r\\n\\t\\tconst dataBuffer = Buffer.from(img.selection.data);\\r\\n\\t\\tconst shape = [1].concat(img.shape);\\r\\n\\t\\tconst image_tensor_buffer_length = dataBuffer.length\\r\\n\\t\\t\\r\\n\\t\\t\\r\\n\\t\\tconst inference_header = {\\r\\n\\t\\t  \\\"model_name\\\" : \\\"test\\\",\\r\\n\\t\\t  \\\"inputs\\\" : [\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t  \\\"name\\\" : \\\"input_tensor\\\",\\r\\n\\t\\t\\t  \\\"shape\\\" : shape,\\r\\n\\t\\t\\t  \\\"datatype\\\" : \\\"UINT8\\\",\\r\\n\\t\\t\\t  \\\"parameters\\\" : {\\r\\n\\t\\t\\t\\t  \\\"binary_data_size\\\":image_tensor_buffer_length\\r\\n\\t\\t\\t  }\\r\\n\\t\\t\\t}\\r\\n\\t\\t  ],\\r\\n\\t\\t  \\\"outputs\\\" : [\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t  \\\"name\\\" : \\\"detection_scores\\\",\\r\\n\\t\\t\\t  \\\"parameters\\\" : {\\r\\n\\t\\t\\t\\t\\\"binary_data\\\" : false\\r\\n\\t\\t\\t  }\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t {\\r\\n\\t\\t\\t  \\\"name\\\" : \\\"detection_boxes\\\",\\r\\n\\t\\t\\t  \\\"parameters\\\" : {\\r\\n\\t\\t\\t\\t\\\"binary_data\\\" : false\\r\\n\\t\\t\\t  }\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t {\\r\\n\\t\\t\\t  \\\"name\\\" : \\\"detection_classes\\\",\\r\\n\\t\\t\\t  \\\"parameters\\\" : {\\r\\n\\t\\t\\t\\t\\\"binary_data\\\" : false\\r\\n\\t\\t\\t  }\\r\\n\\t\\t\\t}\\r\\n\\t\\t  ]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tconst inference_header_buffer = Buffer.from(JSON.stringify(inference_header))\\r\\n\\t\\tconst inference_header_length = inference_header_buffer.length\\r\\n\\t\\tlet payload = Buffer.concat([inference_header_buffer,dataBuffer])\\r\\n\\t\\ttime_ms =  Date.now() - start;\\r\\n\\t\\t\\r\\n\\t\\tif(gzip){\\r\\n\\t\\t\\tpayload = zlib.gzipSync(payload)\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tresult = {\\r\\n\\t\\t\\t\\\"tensorBuffer\\\" : payload,\\r\\n\\t\\t\\t\\\"Content-Type\\\" : \\\"application\\/octet-stream\\\",\\r\\n\\t\\t\\t\\\"inference_header_length\\\": inference_header_length,\\r\\n\\t\\t\\t\\\"image_tensor_buffer_length\\\":image_tensor_buffer_length,\\r\\n\\t\\t\\t\\\"tensorShape\\\":shape,\\r\\n\\t\\t\\t\\\"processing_time\\\":time_ms,\\r\\n\\t\\t\\t\\\"payload\\\":jpeg\\r\\n\\t\\t}\\t\\t\\r\\n\\t\\treturn result\\t\\t\\r\\n\\t}\\r\\n\\tcatch(e){\\r\\n\\t\\tconsole.log(e)\\r\\n\\t}\\r\\n\\t\\t\\r\\n}\"\n\n}\n\n//const worker_script = \"console.log(\\\"Worker starting...\\\");\\r\\nlet nj;\\r\\nlet zlib;\\r\\n\\r\\n\\r\\ntry{\\r\\n\\tnj = require(\\\"./node_modules\\//numjs\\\")\\r\\n}\\r\\ncatch(e){\\r\\n\\tconsole.log(\\\"Loading numjs failed\\\")\\r\\n\\tconsole.log(e)\\r\\n}\\r\\n\\r\\ntry{\\r\\n\\tzlib = require(\\'zlib\\');\\r\\n}\\r\\ncatch(e){\\r\\n\\tconsole.log(e)\\r\\n}\\r\\n\\r\\nmodule.exports = async ({jpeg,gzip}) => {\\r\\n\\ttry{\\r\\n\\t\\tconst start = Date.now();\\t\\r\\n\\t\\tconst img = nj.images.read(jpeg);\\r\\n\\t\\tconst dataBuffer = Buffer.from(img.selection.data);\\r\\n\\t\\tconst shape = [1].concat(img.shape);\\r\\n\\t\\tconst image_tensor_buffer_length = dataBuffer.length\\r\\n\\t\\t\\r\\n\\t\\t\\r\\n\\t\\tconst inference_header = {\\r\\n\\t\\t  \\\"model_name\\\" : \\\"test\\\",\\r\\n\\t\\t  \\\"inputs\\\" : [\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t  \\\"name\\\" : \\\"input_tensor\\\",\\r\\n\\t\\t\\t  \\\"shape\\\" : shape,\\r\\n\\t\\t\\t  \\\"datatype\\\" : \\\"UINT8\\\",\\r\\n\\t\\t\\t  \\\"parameters\\\" : {\\r\\n\\t\\t\\t\\t  \\\"binary_data_size\\\":image_tensor_buffer_length\\r\\n\\t\\t\\t  }\\r\\n\\t\\t\\t}\\r\\n\\t\\t  ],\\r\\n\\t\\t  \\\"outputs\\\" : [\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t  \\\"name\\\" : \\\"detection_scores\\\",\\r\\n\\t\\t\\t  \\\"parameters\\\" : {\\r\\n\\t\\t\\t\\t\\\"binary_data\\\" : false\\r\\n\\t\\t\\t  }\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t {\\r\\n\\t\\t\\t  \\\"name\\\" : \\\"detection_boxes\\\",\\r\\n\\t\\t\\t  \\\"parameters\\\" : {\\r\\n\\t\\t\\t\\t\\\"binary_data\\\" : false\\r\\n\\t\\t\\t  }\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t {\\r\\n\\t\\t\\t  \\\"name\\\" : \\\"detection_classes\\\",\\r\\n\\t\\t\\t  \\\"parameters\\\" : {\\r\\n\\t\\t\\t\\t\\\"binary_data\\\" : false\\r\\n\\t\\t\\t  }\\r\\n\\t\\t\\t}\\r\\n\\t\\t  ]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tconst inference_header_buffer = Buffer.from(JSON.stringify(inference_header))\\r\\n\\t\\tconst inference_header_length = inference_header_buffer.length\\r\\n\\t\\tlet payload = Buffer.concat([inference_header_buffer,dataBuffer])\\r\\n\\t\\ttime_ms =  Date.now() - start;\\r\\n\\t\\t\\r\\n\\t\\tif(gzip){\\r\\n\\t\\t\\tpayload = zlib.gzipSync(payload)\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tresult = {\\r\\n\\t\\t\\t\\\"tensorBuffer\\\" : payload,\\r\\n\\t\\t\\t\\\"Content-Type\\\" : \\\"application\\/octet-stream\\\",\\r\\n\\t\\t\\t\\\"inference_header_length\\\": inference_header_length,\\r\\n\\t\\t\\t\\\"image_tensor_buffer_length\\\":image_tensor_buffer_length,\\r\\n\\t\\t\\t\\\"tensorShape\\\":shape,\\r\\n\\t\\t\\t\\\"processing_time\\\":time_ms,\\r\\n\\t\\t\\t\\\"payload\\\":jpeg\\r\\n\\t\\t}\\t\\t\\r\\n\\t\\treturn result\\t\\t\\r\\n\\t}\\r\\n\\tcatch(e){\\r\\n\\t\\tconsole.log(e)\\r\\n\\t}\\r\\n\\t\\t\\r\\n}\"\n\n\n\n\nlet numberOfWorkers;\n\ntry{\n    numberOfWorkers = env.get(\"numberOfWorkers\")\n}\ncatch(e){\n    node.warn(\"Loading numberOfWorkers from env variable failed... using default value = 1\")\n    node.warn(e)\n    numberOfWorkers = 1\n}\n\n\nfs.writeFile(worker_path, worker_script, function (err) {\n    if (err) {\n        node.error(\"Cannot create web_worker_test_script.js file: \" + err);\n    }\n});\n\ntry{\n    const piscina = new pis.Piscina({\n      filename: worker_path,\n      maxThreads: numberOfWorkers\n    });\n    \n    context.set(\"piscina\",piscina)\n    node.status({fill:\"green\", shape:\"dot\", text:\"Piscina initialized\"});\n}\ncatch(error){\n    node.warn(error)\n    node.status({fill:\"red\", shape:\"dot\", text:\"Initializing piscina failed...\"});\n}\n",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\ncontext.set(\"piscina\",{})",
        "libs": [
            {
                "var": "pis",
                "module": "piscina"
            },
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "zlib",
                "module": "zlib"
            },
            {
                "var": "os",
                "module": "os"
            },
            {
                "var": "process",
                "module": "process"
            },
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 300,
        "y": 280,
        "wires": [
            [
                "056c21b301cf8d19"
            ]
        ]
    },
    {
        "id": "8466a1e6db17728c",
        "type": "subflow:5977f362e19ccc41",
        "z": "72aa9a57139f5665",
        "name": "",
        "env": [
            {
                "name": "model_name",
                "value": "tequ-fish-species-detection",
                "type": "str"
            },
            {
                "name": "triton_server_url",
                "value": "192.168.2.118:8000",
                "type": "str"
            },
            {
                "name": "gzip_response",
                "value": "true",
                "type": "bool"
            },
            {
                "name": "Workers",
                "value": "5",
                "type": "num"
            },
            {
                "name": "nr_folder",
                "value": "c:\\\\users\\\\juha.autioniemi\\\\.node-red",
                "type": "str"
            }
        ],
        "x": 450,
        "y": 280,
        "wires": [
            [
                "69a860a5913298ff"
            ],
            [
                "83a249b812418b2d"
            ],
            [
                "42cb3a8a9af52267"
            ],
            [
                "e15eca3a7fe0db78"
            ],
            [
                "11a540517668a0d1"
            ]
        ]
    }
]
